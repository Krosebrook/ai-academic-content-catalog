
import { GoogleGenAI, Type } from "@google/genai";
import { GenerationParams, EducationalContent, Assessment } from "../types/education";

// This would be in a .env file
const API_KEY = process.env.API_KEY; 
const ai = new GoogleGenAI({ apiKey: API_KEY! });

const lessonPlanSchema = {
    type: Type.OBJECT,
    properties: {
        id: { type: Type.STRING, description: 'A UUID for the content.' },
        title: { type: Type.STRING },
        type: { type: Type.STRING, enum: ['lesson'] },
        targetAudience: { type: Type.STRING, enum: ['educator', 'student', 'both', 'seller'] },
        subject: { type: Type.STRING },
        gradeLevel: { type: Type.STRING },
        standard: { type: Type.STRING, description: "The educational standard, if provided." },
        content: { type: Type.STRING, description: "The full lesson plan in Markdown format." },
        metadata: {
            type: Type.OBJECT,
            properties: {
                duration: { type: Type.STRING, description: "Estimated duration, e.g., '45 minutes'." },
                materials: { type: Type.ARRAY, items: { type: Type.STRING } },
                objectives: { type: Type.ARRAY, items: { type: Type.STRING } },
                differentiation: { type: Type.ARRAY, items: { type: Type.STRING } },
            }
        },
        generatedAt: { type: Type.STRING, description: 'The ISO 8601 timestamp of generation.' },
    }
};

const assessmentSchema = {
    type: Type.OBJECT,
    properties: {
        id: { type: Type.STRING, description: 'A UUID for the assessment.' },
        title: { type: Type.STRING },
        type: { type: Type.STRING, enum: ['assessment']},
        questions: {
            type: Type.ARRAY,
            items: {
                type: Type.OBJECT,
                properties: {
                    id: { type: Type.STRING, description: 'A UUID for the question.' },
                    type: { type: Type.STRING, enum: ['multiple-choice', 'short-answer', 'essay', 'true-false'] },
                    prompt: { type: Type.STRING },
                    choices: { type: Type.ARRAY, items: { type: Type.STRING } },
                    answerKey: { type: Type.STRING },
                    points: { type: Type.NUMBER },
                }
            }
        },
        pointsTotal: { type: Type.NUMBER },
    }
};

export const generateContent = async (
    params: GenerationParams
): Promise<EducationalContent | Assessment | { error: string }> => {
    
    const isAssessment = params.type === 'assessment';
    
    const prompt = `
        You are an expert curriculum designer. Generate an ${params.type} for the following specifications:
        - Audience: ${params.audience}
        - Subject: ${params.subject}
        - Grade Level: ${params.grade}
        - Topic: ${params.topic}
        ${params.standard ? `- Align to Standard: ${params.standard}` : ''}
        
        The output must be a single JSON object that strictly adheres to the provided schema.
        Do not include any text or formatting outside of the JSON object.
    `;

    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: {
                responseMimeType: 'application/json',
                responseSchema: isAssessment ? assessmentSchema : lessonPlanSchema,
            },
        });

        const jsonText = response.text;
        const result = JSON.parse(jsonText);
        
        // Add fields not generated by AI
        if (!isAssessment) {
            (result as EducationalContent).generatedAt = new Date().toISOString();
        }

        return result;

    } catch (error) {
        console.error("Error generating content with Gemini:", error);
        return { error: "Failed to generate content. Please check your API key and try again." };
    }
};

export const generateContentSimulation = (
    params: GenerationParams,
    onProgress: (progress: number, chunk: string) => void
): Promise<EducationalContent | Assessment> => {
    return new Promise((resolve) => {
        const isAssessment = params.type === 'assessment';
        let progress = 0;
        let streamedContent = "";

        const interval = setInterval(() => {
            progress += 10;
            const chunk = `\nGenerating part ${progress / 10}...`;
            streamedContent += chunk;
            onProgress(progress, chunk);

            if (progress >= 100) {
                clearInterval(interval);
                const finalContent: EducationalContent | Assessment = isAssessment
                    ? {
                        id: self.crypto.randomUUID(),
                        title: `Quiz on ${params.topic}`,
                        type: 'assessment',
                        pointsTotal: 20,
                        questions: [
                            { id: self.crypto.randomUUID(), type: 'multiple-choice', prompt: `What is the capital of ${params.subject}?`, choices: ['A', 'B', 'C', 'D'], answerKey: 'A', points: 10 },
                            { id: self.crypto.randomUUID(), type: 'short-answer', prompt: 'Explain the main concept.', answerKey: 'The main concept is...', points: 10 },
                        ],
                    }
                    : {
                        id: self.crypto.randomUUID(),
                        title: `Lesson Plan for ${params.topic}`,
                        type: 'lesson',
                        targetAudience: params.audience,
                        subject: params.subject,
                        gradeLevel: params.grade,
                        standard: params.standard,
                        content: `# Lesson: ${params.topic}\n\nThis is a detailed lesson plan.\n\n${streamedContent}`,
                        metadata: {
                            duration: "1 hour",
                            materials: ["Textbook", "Worksheet"],
                            objectives: ["Students will be able to..."],
                            differentiation: ["For advanced learners..."]
                        },
                        generatedAt: new Date().toISOString(),
                    };
                resolve(finalContent);
            }
        }, 300);
    });
};
